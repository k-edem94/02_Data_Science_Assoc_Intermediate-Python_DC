Logic, Control Flow and Filtering

-------------Equality
To check if two Python values, or variables, are equal you can use ==. 
To check for inequality, you need !=. As a refresher, have a look at 
the following examples that all result in True. 

# Comparison of booleans
print(True == False)

# Comparison of integers
print(-5*15 != 75)

# Comparison of strings
print("pyscript" == "PyScript")

# Compare a boolean with an integer
print(True == 1)

--------------Greater and less than
the less than and greater than signs, < and > in Python. You can 
combine them with an equals sign: <= and >=. Pay attention: <= is valid 
syntax, but =< is not.

Remember that for string comparison, Python determines the relationship 
based on alphabetical order.

# Comparison of integers
x = -3 * 6
print(x >= -10)

# Comparison of strings
y = "test"
print("test" <= y)

# Comparison of booleans
print(True > False)

=============Compare arrays
# Create arrays
import numpy as np
my_house = np.array([18.0, 20.0, 10.75, 9.50])
your_house = np.array([14.0, 24.0, 14.25, 9.0])

# my_house greater than or equal to 18
print(my_house >= 18)

# my_house less than your_house
print(my_house < your_house)

=============and, or, not (1)
A boolean is either 1 or 0, True or False. With boolean operators 
such as and, or and not, you can combine these booleans to perform 
more advanced queries on your data.

# Define variables
my_kitchen = 18.0
your_kitchen = 14.0

# my_kitchen bigger than 10 and smaller than 18?
print(my_kitchen > 10 and my_kitchen < 18)

# my_kitchen smaller than 14 or bigger than 17?
print(my_kitchen < 14 or my_kitchen > 17)

# Double my_kitchen smaller than triple your_kitchen?
print(my_kitchen * 2 < your_kitchen * 3)

==========and, or, not (2)
To see if you completely understood the boolean operators, have a 
look at the following piece of Python code:

x = 8
y = 9
not(not(x < 3) and not(y > 14 or y > 10))
What will the result be if you execute these three commands in the 
IPython Shell?

NB: Notice that not has a higher priority than and and or, it is 
executed first.

x < 3 is False. y > 14 or y > 10 is False as well. If you continue 
working like this, simplifying from inside outwards, you'll end up 
with False.

==========Boolean operators with NumPy
Before, the operational operators like < and >= worked with NumPy 
arrays out of the box. Unfortunately, this is not true for the 
boolean operators and, or, and not.

To use these operators with NumPy, you will need np.logical_and(), 
np.logical_or() and np.logical_not().

Example:
np.logical_and(my_house > 13, 
               your_house < 15)

# Create arrays
import numpy as np
my_house = np.array([18.0, 20.0, 10.75, 9.50])
your_house = np.array([14.0, 24.0, 14.25, 9.0])

# my_house greater than 18.5 or smaller than 10
print(np.logical_or(my_house > 18.5, my_house < 10))

# Both my_house and your_house smaller than 11
print(np.logical_and( my_house < 11, your_house < 11))

===========Warmup
To experiment with if and else a bit, have a look at this code 
sample:

area = 10.0
if(area < 9) :
    print("small")
elif(area < 12) :
    print("medium")
else :
    print("large")

=============if
# Define variables
room = "kit"
area = 14.0

# if statement for room (Examine the if statement that prints out)
if room == "kit" :
    print("looking around in the kitchen.")

# if statement for area (Write another if statement that prints out "big place!" if area is greater than 15.)
if area > 15.0:
    print("big place!")

===============Add else
In the script, the if construct for room has been extended with an 
else statement so that "looking around elsewhere." is printed if the 
condition room == "kit" evaluates to False.

Can you do a similar thing to add more functionality to the if 
construct for area?

Question
Add an else statement to the second control structure so that 
"pretty small." is printed out if area > 15 evaluates to False.

# Define variables
room = "kit"
area = 14.0

# if-else construct for room
if room == "kit" :
    print("looking around in the kitchen.")
else :
    print("looking around elsewhere.")

# if-else construct for area
if area > 15 :
    print("big place!")
else :
    print("pretty small.")

==============Customize further: elif
It's also possible to have a look around in the bedroom. The sample 
code contains an elif part that checks if room equals "bed". In that 
case, "looking around in the bedroom." is printed out.

Add an elif to the second control structure such that "medium size, 
nice!" is printed out if area is greater than 10.

# Define variables
room = "bed"
area = 14.0

# if-elif-else construct for room
if room == "kit" :
    print("looking around in the kitchen.")
elif room == "bed":
    print("looking around in the bedroom.")
else :
    print("looking around elsewhere.")

# if-elif-else construct for area
if area > 15 :
    print("big place!")
elif (area > 10):
    print("medium size, nice!")
else :
    print("pretty small.")

===============Driving right (1)

drives_right is a boolean column, so you'll have to extract it as a 
Series and then use this boolean Series to select observations from 
cars.

Instructions
--Extract the drives_right column as a Pandas Series and store it as dr.
--Use dr, a boolean Series, to subset the cars DataFrame. Store the resulting selection in sel.
--Print sel, and assert that drives_right is True for all observations.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Extract drives_right column as Series: dr
dr = cars.loc[:, "drives_right"]

# Use dr to subset cars: sel
sel = cars[dr]

# Print sel
print(sel)

================Driving right (2)
The code in the previous example worked fine, but you actually 
unnecessarily created a new variable dr. You can achieve the same 
result without this intermediate variable. Put the code that computes 
dr straight into the square brackets that select observations from cars.

--Convert the code to a one-liner that calculates the variable sel as 
before.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Convert code to a one-liner
#dr = cars['drives_right']
sel = cars[cars['drives_right']]


# Print sel
print(sel)

===================Cars per capita (1)
This time you want to find out which countries have a high cars per 
capita figure. In other words, in which countries do many people have 
a car, or maybe multiple cars.

Similar to the previous example, you'll want to build up a boolean 
Series, that you can then use to subset the cars DataFrame to select 
certain observations. If you want to do this in a one-liner, that's 
perfectly fine!

---Instructions
Select the cars_per_cap column from cars as a Pandas Series and store it as cpc.
Use cpc in combination with a comparison operator and 500. You want to end up with a boolean Series that's True if the corresponding country has a cars_per_cap of more than 500 and False otherwise. Store this boolean Series as many_cars.
Use many_cars to subset cars, similar to what you did before. Store the result as car_maniac.
Print out car_maniac to see if you got it right.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Create car_maniac: observations that have a cars_per_cap over 500
cpc = cars['cars_per_cap']
many_cars = cpc > 500
car_maniac = cars[many_cars]

# Print car_maniac
print(car_maniac)

========Cars per capita (2)
Use the code sample provided to create a DataFrame medium, that 
includes all the observations of cars that have a cars_per_cap 
between 100 and 500.

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Import numpy, you'll need this
import numpy as np

# Create medium: observations with cars_per_cap between 100 and 500
cpc = cars['cars_per_cap']
between = np.logical_and(cpc > 100, cpc < 500)
medium = cars[between]


# Print medium
print(medium)
===========
